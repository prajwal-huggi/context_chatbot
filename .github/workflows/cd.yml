name: CD to ECS Fargate (Smart)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-north-1
      ECR_BASE: 175790960921.dkr.ecr.eu-north-1.amazonaws.com/prajwal2434/context_chatbot
      ECS_CLUSTER: context-chatbot-cluster
      ECS_SERVICE: context-chatbot-service
      ECS_TASK_DEF: context-chatbot-task

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_BASE

      - name: Fetch existing ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEF \
            --region $AWS_REGION \
            --query "taskDefinition" > ecs-task.json

      - name: Detect Dockerfile versions
        id: detect_versions
        run: |
          git fetch origin main

          detect_version() {
            FILE=$1
            NAME=$2
            LHS=$(git show origin/main:$FILE 2>/dev/null | grep 'ARG VERSION' | cut -d '=' -f2 || echo "")
            RHS=$(grep 'ARG VERSION' $FILE 2>/dev/null | cut -d '=' -f2 || echo "")
            echo "$NAME"_LHS="$LHS" >> $GITHUB_ENV
            echo "$NAME"_RHS="$RHS" >> $GITHUB_ENV
            if [[ "$LHS" == "$RHS" && "$LHS" != "" ]]; then
              echo "$NAME"_CHANGED=false
            else
              echo "$NAME"_CHANGED=true
            fi
          }

          FRONTEND_CHANGED=$(detect_version frontend/Dockerfile FRONTEND; echo $FRONTEND_CHANGED)
          BACKEND_CHANGED=$(detect_version backend/Dockerfile BACKEND; echo $BACKEND_CHANGED)
          RAG_CHANGED=$(detect_version ragSystem/Dockerfile RAG; echo $RAG_CHANGED)

          echo "frontend_changed=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "backend_changed=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "rag_changed=$RAG_CHANGED" >> $GITHUB_OUTPUT

      # ---- Build & Push Frontend ----
      - name: Build & Push Frontend
        id: build_frontend
        if: steps.detect_versions.outputs.frontend_changed == 'true'
        run: |
          VERSION=${FRONTEND_RHS:-frontend-v1}
          docker buildx use mybuilder || docker buildx create --use --name mybuilder
          docker buildx build --platform linux/amd64 -t $ECR_BASE:$VERSION ./frontend --push
          
          DIGEST=$(aws ecr describe-images \
                    --repository-name context_chatbot \
                    --image-ids imageTag=$VERSION \
                    --query 'imageDetails[0].imageDigest' --output text)
          echo "frontend_digest=$ECR_BASE@$DIGEST" >> $GITHUB_OUTPUT

      # ---- Build & Push Backend ----
      - name: Build & Push Backend
        id: build_backend
        if: steps.detect_versions.outputs.backend_changed == 'true'
        run: |
          VERSION=${BACKEND_RHS:-backend-v1}
          docker buildx use mybuilder || docker buildx create --use --name mybuilder
          docker buildx build --platform linux/amd64 -t $ECR_BASE:$VERSION ./backend --push
          
          DIGEST=$(aws ecr describe-images \
                    --repository-name context_chatbot \
                    --image-ids imageTag=$VERSION \
                    --query 'imageDetails[0].imageDigest' --output text)
          echo "backend_digest=$ECR_BASE@$DIGEST" >> $GITHUB_OUTPUT

      # ---- Build & Push RAG System ----
      - name: Build & Push RAG System
        id: build_rag
        if: steps.detect_versions.outputs.rag_changed == 'true'
        run: |
          VERSION=${RAG_RHS:-ragsystem-v1}
          docker buildx use mybuilder || docker buildx create --use --name mybuilder
          docker buildx build --platform linux/amd64 -t $ECR_BASE:$VERSION ./ragSystem --push
          
          DIGEST=$(aws ecr describe-images \
                    --repository-name context_chatbot \
                    --image-ids imageTag=$VERSION \
                    --query 'imageDetails[0].imageDigest' --output text)
          echo "rag_digest=$ECR_BASE@$DIGEST" >> $GITHUB_OUTPUT

      # ---- Set ECS image variables (fallback to existing task if not rebuilt) ----
      - name: Set ECS images
        id: set_images
        run: |
          FRONTEND_IMG=${{ steps.build_frontend.outputs.frontend_digest }}
          BACKEND_IMG=${{ steps.build_backend.outputs.backend_digest }}
          RAG_IMG=${{ steps.build_rag.outputs.rag_digest }}

          # Fallback to current task definition if image not rebuilt
          FRONTEND_IMG=${FRONTEND_IMG:-$(jq -r '.containerDefinitions[] | select(.name=="frontend").image' ecs-task.json)}
          BACKEND_IMG=${BACKEND_IMG:-$(jq -r '.containerDefinitions[] | select(.name=="backend").image' ecs-task.json)}
          RAG_IMG=${RAG_IMG:-$(jq -r '.containerDefinitions[] | select(.name=="ragsystem").image' ecs-task.json)}

          echo "FRONTEND_IMG=$FRONTEND_IMG" >> $GITHUB_ENV
          echo "BACKEND_IMG=$BACKEND_IMG" >> $GITHUB_ENV
          echo "RAG_IMG=$RAG_IMG" >> $GITHUB_ENV

      # ---- Update ECS Task Definition ----
      - name: Update ECS Task Definition
        run: |
          jq --arg fe "$FRONTEND_IMG" \
             --arg be "$BACKEND_IMG" \
             --arg rag "$RAG_IMG" \
             '.containerDefinitions |= map(
               if .name=="frontend" then .image=$fe
               elif .name=="backend" then .image=$be
               elif .name=="ragsystem" then .image=$rag
               else . end
             )' ecs-task.json > ecs-task-updated.json

      # ---- Deploy ECS Task ----
      - name: Deploy ECS Task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ecs-task-updated.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
