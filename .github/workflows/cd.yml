name: CD to ECS Fargate (Single Task)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-north-1
      ECR_BASE: 175790960921.dkr.ecr.eu-north-1.amazonaws.com/prajwal2434/context_chatbot

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch full history to compare with main

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_BASE

      - name: Detect Dockerfile versions
        id: detect_versions
        run: |
          git fetch origin main

          # ----- FRONTEND -----
          LHS_FRONTEND=$(git show origin/main:frontend/Dockerfile 2>/dev/null | grep 'ARG VERSION' | cut -d '=' -f2 || echo "")
          RHS_FRONTEND=$(grep 'ARG VERSION' frontend/Dockerfile | cut -d '=' -f2 || echo "")
          echo "LHS_FRONTEND=$LHS_FRONTEND" >> $GITHUB_ENV
          echo "RHS_FRONTEND=$RHS_FRONTEND" >> $GITHUB_ENV
          if [[ "$LHS_FRONTEND" == "$RHS_FRONTEND" && "$LHS_FRONTEND" != "" ]]; then
            echo "FRONTEND_CHANGED=false" >> $GITHUB_ENV
          else
            echo "FRONTEND_CHANGED=true" >> $GITHUB_ENV
          fi

          # ----- BACKEND -----
          LHS_BACKEND=$(git show origin/main:backend/Dockerfile 2>/dev/null | grep 'ARG VERSION' | cut -d '=' -f2 || echo "")
          RHS_BACKEND=$(grep 'ARG VERSION' backend/Dockerfile | cut -d '=' -f2 || echo "")
          echo "LHS_BACKEND=$LHS_BACKEND" >> $GITHUB_ENV
          echo "RHS_BACKEND=$RHS_BACKEND" >> $GITHUB_ENV
          if [[ "$LHS_BACKEND" == "$RHS_BACKEND" && "$LHS_BACKEND" != "" ]]; then
            echo "BACKEND_CHANGED=false" >> $GITHUB_ENV
          else
            echo "BACKEND_CHANGED=true" >> $GITHUB_ENV
          fi

          # ----- RAG SYSTEM -----
          LHS_RAG=$(git show origin/main:ragSystem/Dockerfile 2>/dev/null | grep 'ARG VERSION' | cut -d '=' -f2 || echo "")
          RHS_RAG=$(grep 'ARG VERSION' ragSystem/Dockerfile | cut -d '=' -f2 || echo "")
          echo "LHS_RAG=$LHS_RAG" >> $GITHUB_ENV
          echo "RHS_RAG=$RHS_RAG" >> $GITHUB_ENV
          if [[ "$LHS_RAG" == "$RHS_RAG" && "$LHS_RAG" != "" ]]; then
            echo "RAG_CHANGED=false" >> $GITHUB_ENV
          else
            echo "RAG_CHANGED=true" >> $GITHUB_ENV
          fi

      # ---- Build & Push Frontend ----
      - name: Build & Push Frontend
        if: env.FRONTEND_CHANGED == 'true'
        run: |
          VERSION=${RHS_FRONTEND:-frontend-v1}
          echo "Building frontend image version: $VERSION"
          docker buildx create --use --name mybuilder || true
          docker buildx build --platform linux/amd64 -t $ECR_BASE:$VERSION ./frontend --push
          echo "FRONTEND_VERSION=$VERSION" >> $GITHUB_ENV

      # ---- Build & Push Backend ----
      - name: Build & Push Backend
        if: env.BACKEND_CHANGED == 'true'
        run: |
          VERSION=${RHS_BACKEND:-backend-v1}
          echo "Building backend image version: $VERSION"
          docker buildx create --use --name mybuilder || true
          docker buildx build --platform linux/amd64 -t $ECR_BASE:$VERSION ./backend --push
          echo "BACKEND_VERSION=$VERSION" >> $GITHUB_ENV

      # ---- Build & Push RAG System ----
      - name: Build & Push RAG System
        if: env.RAG_CHANGED == 'true'
        run: |
          VERSION=${RHS_RAG:-ragSystem-v1}
          echo "Building RAG System image version: $VERSION"
          docker buildx create --use --name mybuilder || true
          docker buildx build --platform linux/amd64 -t $ECR_BASE:$VERSION ./ragSystem --push
          echo "RAG_VERSION=$VERSION" >> $GITHUB_ENV

      # ---- Update ECS Task Definition ----
      - name: Update ECS Task Definition
        if: env.FRONTEND_CHANGED == 'true' || env.BACKEND_CHANGED == 'true' || env.RAG_CHANGED == 'true'
        run: |
          FRONTEND_IMG=${FRONTEND_VERSION:-frontend-v1}
          BACKEND_IMG=${BACKEND_VERSION:-backend-v1}
          RAG_IMG=${RAG_VERSION:-ragSystem-v1}

          jq --arg fe "$ECR_BASE:$FRONTEND_IMG" \
             --arg be "$ECR_BASE:$BACKEND_IMG" \
             --arg rag "$ECR_BASE:$RAG_IMG" \
             '.containerDefinitions[0].image=$fe |
              .containerDefinitions[1].image=$be |
              .containerDefinitions[2].image=$rag' \
             ecs-task.json > ecs-task-updated.json

      # ---- Deploy to ECS ----
      - name: Deploy ECS Task
        if: env.FRONTEND_CHANGED == 'true' || env.BACKEND_CHANGED == 'true' || env.RAG_CHANGED == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ecs-task-updated.json
          service: context-chatbot-service
          cluster: your-cluster
          wait-for-service-stability: true
